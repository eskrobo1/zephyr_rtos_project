/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/emina/zephyr_rtos/04_zephyr-timers/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /soc
 *   4   /soc/interrupt-controller@ff841000
 *   5   /timer
 *   6   /cpus
 *   7   /cpus/cpu@0
 *   8   /soc/gpio@fe200000
 *   9   /soc/gpio@fe200000/gpio@1c
 *   10  /leds
 *   11  /leds/led-act
 *   12  /soc/memory@200000
 *   13  /soc/uart@fe215040
 *   14  /soc/gpio@fe200000/gpio@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FULL_NAME_UNQUOTED /
#define DT_N_FULL_NAME_TOKEN _
#define DT_N_FULL_NAME_UPPER_TOKEN _

/* Helpers for dealing with node labels: */
#define DT_N_NODELABEL_NUM 0
#define DT_N_FOREACH_NODELABEL(fn) 
#define DT_N_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_FOREACH_ANCESTOR(fn) 

/* Helper macros for child nodes of this node. */
#define DT_N_CHILD_NUM 6
#define DT_N_CHILD_NUM_STATUS_OKAY 6
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__)

/* Node's hash: */
#define DT_N_HASH il7asoJjJEMhngUeSt4tHVu8Zxx4EFG_FDeJfL3_oPE

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /soc */ \
	5, /* /timer */ \
	6, /* /cpus */ \
	10, /* /leds */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_raspberrypi_4_model_b DT_N
#define DT_N_INST_0_brcm_bcm2838          DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_raspberrypi_4_model_b 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "4-model-b"
#define DT_N_COMPAT_MATCHES_brcm_bcm2838 1
#define DT_N_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_1 "Broadcom Corporation"
#define DT_N_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_1 "bcm2838"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"raspberrypi,4-model-b", "brcm,bcm2838"}
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_0 "raspberrypi,4-model-b"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED raspberrypi,4-model-b
#define DT_N_P_compatible_IDX_0_STRING_TOKEN raspberrypi_4_model_b
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_4_MODEL_B
#define DT_N_P_compatible_IDX_1_EXISTS 1
#define DT_N_P_compatible_IDX_1 "brcm,bcm2838"
#define DT_N_P_compatible_IDX_1_STRING_UNQUOTED brcm,bcm2838
#define DT_N_P_compatible_IDX_1_STRING_TOKEN brcm_bcm2838
#define DT_N_P_compatible_IDX_1_STRING_UPPER_TOKEN BRCM_BCM2838
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0) \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__) \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_LEN 2
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"
#define DT_N_S_aliases_FULL_NAME_UNQUOTED aliases
#define DT_N_S_aliases_FULL_NAME_TOKEN aliases
#define DT_N_S_aliases_FULL_NAME_UPPER_TOKEN ALIASES

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_aliases_NODELABEL_NUM 0
#define DT_N_S_aliases_FOREACH_NODELABEL(fn) 
#define DT_N_S_aliases_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_CHILD_NUM 0
#define DT_N_S_aliases_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_aliases_HASH QavYY6yplHKhLPRKsRzaLCGlR0CWZ0JUNJakcBCfDXA

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"
#define DT_N_S_chosen_FULL_NAME_UNQUOTED chosen
#define DT_N_S_chosen_FULL_NAME_TOKEN chosen
#define DT_N_S_chosen_FULL_NAME_UPPER_TOKEN CHOSEN

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_chosen_NODELABEL_NUM 0
#define DT_N_S_chosen_FOREACH_NODELABEL(fn) 
#define DT_N_S_chosen_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_CHILD_NUM 0
#define DT_N_S_chosen_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_chosen_HASH qNExeeLInzqaWpm1KroyYDk4lRIxVO2ig78mq_hOnA8

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2
#define DT_N_S_chosen_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"
#define DT_N_S_soc_FULL_NAME_UNQUOTED soc
#define DT_N_S_soc_FULL_NAME_TOKEN soc
#define DT_N_S_soc_FULL_NAME_UPPER_TOKEN SOC

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_NODELABEL_NUM 0
#define DT_N_S_soc_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_soc_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_CHILD_NUM 4
#define DT_N_S_soc_CHILD_NUM_STATUS_OKAY 4
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_200000) fn(DT_N_S_soc_S_interrupt_controller_ff841000) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc_S_uart_fe215040)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_memory_200000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_ff841000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_fe215040)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_200000) fn(DT_N_S_soc_S_interrupt_controller_ff841000) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc_S_uart_fe215040)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_memory_200000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_ff841000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_fe215040)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_soc_HASH DcVqqq9YzG86l3_Hk7pNncUh2rnHG8USjbVY6wBdFts

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 3
#define DT_N_S_soc_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	4, /* /soc/interrupt-controller@ff841000 */ \
	8, /* /soc/gpio@fe200000 */ \
	12, /* /soc/memory@200000 */ \
	13, /* /soc/uart@fe215040 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_IRQ_LEVEL 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@ff841000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_ff841000
 *
 * Binding (compatible = arm,gic-v2):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/arm,gic-v2.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_PATH "/soc/interrupt-controller@ff841000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_FULL_NAME "interrupt-controller@ff841000"
#define DT_N_S_soc_S_interrupt_controller_ff841000_FULL_NAME_UNQUOTED interrupt-controller@ff841000
#define DT_N_S_soc_S_interrupt_controller_ff841000_FULL_NAME_TOKEN interrupt_controller_ff841000
#define DT_N_S_soc_S_interrupt_controller_ff841000_FULL_NAME_UPPER_TOKEN INTERRUPT_CONTROLLER_FF841000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_NODELABEL_NUM 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_NODELABEL(fn) fn(gic)
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_NODELABEL_VARGS(fn, ...) fn(gic, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_ff841000_CHILD_NUM 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_HASH GhpM0cw_Q9mRrE_3C3OlxKHMUOICEWUsiXYADttcPdQ

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_ORD 4
#define DT_N_S_soc_S_interrupt_controller_ff841000_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_SUPPORTS_ORDS \
	5, /* /timer */ \
	9, /* /soc/gpio@fe200000/gpio@1c */ \
	13, /* /soc/uart@fe215040 */ \
	14, /* /soc/gpio@fe200000/gpio@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_EXISTS 1
#define DT_N_INST_0_arm_gic_v2 DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_INST_0_arm_gic    DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_NODELABEL_gic     DT_N_S_soc_S_interrupt_controller_ff841000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_NUM 2
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_0_VAL_ADDRESS 4286844928 /* 0xff841000 */
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_1_VAL_ADDRESS 4286849024 /* 0xff842000 */
#define DT_N_S_soc_S_interrupt_controller_ff841000_REG_IDX_1_VAL_SIZE 8192 /* 0x2000 */
#define DT_N_S_soc_S_interrupt_controller_ff841000_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_ff841000_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_IRQ_LEVEL 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MATCHES_arm_gic_v2 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MODEL_IDX_0 "gic-v2"
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MATCHES_arm_gic 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_VENDOR_IDX_1 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_COMPAT_MODEL_IDX_1 "gic"
#define DT_N_S_soc_S_interrupt_controller_ff841000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg {4286844928 /* 0xff841000 */, 4096 /* 0x1000 */, 4286849024 /* 0xff842000 */, 8192 /* 0x2000 */}
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_0 4286844928
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_2 4286849024
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_IDX_3 8192
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_ff841000, status, 0)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_ff841000, status, 0)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_LEN 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible {"arm,gic-v2", "arm,gic"}
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_0 "arm,gic-v2"
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_0_STRING_UNQUOTED arm,gic-v2
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_0_STRING_TOKEN arm_gic_v2
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_GIC_V2
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_1 "arm,gic"
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_1_STRING_UNQUOTED arm,gic
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_1_STRING_TOKEN arm_gic
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_IDX_1_STRING_UPPER_TOKEN ARM_GIC
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 1)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 1)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_ff841000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_LEN 2
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_ff841000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /timer
 *
 * Node identifier: DT_N_S_timer
 *
 * Binding (compatible = arm,armv8-timer):
 *   $ZEPHYR_BASE/dts/bindings/timer/arm,armv8-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_timer_PATH "/timer"

/* Node's name with unit-address: */
#define DT_N_S_timer_FULL_NAME "timer"
#define DT_N_S_timer_FULL_NAME_UNQUOTED timer
#define DT_N_S_timer_FULL_NAME_TOKEN timer
#define DT_N_S_timer_FULL_NAME_UPPER_TOKEN TIMER

/* Node parent (/) identifier: */
#define DT_N_S_timer_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_timer_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_timer_NODELABEL_NUM 0
#define DT_N_S_timer_FOREACH_NODELABEL(fn) 
#define DT_N_S_timer_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_timer_CHILD_NUM 0
#define DT_N_S_timer_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_timer_FOREACH_CHILD(fn) 
#define DT_N_S_timer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_timer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_timer_HASH KNnVNZN2GhkR0nNuh3Czq6S8058skWF6qvJ6vcpoSF4

/* Node's dependency ordinal: */
#define DT_N_S_timer_ORD 5
#define DT_N_S_timer_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_timer_REQUIRES_ORDS \
	0, /* / */ \
	4, /* /soc/interrupt-controller@ff841000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_timer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_timer_EXISTS 1
#define DT_N_INST_0_arm_armv8_timer DT_N_S_timer

/* Macros for properties that are special in the specification: */
#define DT_N_S_timer_REG_NUM 0
#define DT_N_S_timer_RANGES_NUM 0
#define DT_N_S_timer_FOREACH_RANGE(fn) 
#define DT_N_S_timer_IRQ_NUM 4
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq 30
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq 27
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq 26
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_timer_IRQ_LEVEL 1
#define DT_N_S_timer_COMPAT_MATCHES_arm_armv8_timer 1
#define DT_N_S_timer_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_timer_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_timer_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_timer_COMPAT_MODEL_IDX_0 "armv8-timer"
#define DT_N_S_timer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_timer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_timer_P_interrupts {1 /* 0x1 */, 13 /* 0xd */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 14 /* 0xe */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 11 /* 0xb */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 10 /* 0xa */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_timer_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_0 1
#define DT_N_S_timer_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_1 13
#define DT_N_S_timer_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_2 2
#define DT_N_S_timer_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_3 160
#define DT_N_S_timer_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_4 1
#define DT_N_S_timer_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_5 14
#define DT_N_S_timer_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_6 2
#define DT_N_S_timer_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_7 160
#define DT_N_S_timer_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_8 1
#define DT_N_S_timer_P_interrupts_IDX_9_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_9 11
#define DT_N_S_timer_P_interrupts_IDX_10_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_10 2
#define DT_N_S_timer_P_interrupts_IDX_11_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_11 160
#define DT_N_S_timer_P_interrupts_IDX_12_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_12 1
#define DT_N_S_timer_P_interrupts_IDX_13_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_13 10
#define DT_N_S_timer_P_interrupts_IDX_14_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_14 2
#define DT_N_S_timer_P_interrupts_IDX_15_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_15 160
#define DT_N_S_timer_P_interrupts_EXISTS 1
#define DT_N_S_timer_P_compatible {"arm,armv8-timer"}
#define DT_N_S_timer_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_timer_P_compatible_IDX_0 "arm,armv8-timer"
#define DT_N_S_timer_P_compatible_IDX_0_STRING_UNQUOTED arm,armv8-timer
#define DT_N_S_timer_P_compatible_IDX_0_STRING_TOKEN arm_armv8_timer
#define DT_N_S_timer_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV8_TIMER
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, compatible, 0)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_timer, compatible, 0)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_timer_P_compatible_LEN 1
#define DT_N_S_timer_P_compatible_EXISTS 1
#define DT_N_S_timer_P_zephyr_deferred_init 0
#define DT_N_S_timer_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_timer_P_wakeup_source 0
#define DT_N_S_timer_P_wakeup_source_EXISTS 1
#define DT_N_S_timer_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_timer_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"
#define DT_N_S_cpus_FULL_NAME_UNQUOTED cpus
#define DT_N_S_cpus_FULL_NAME_TOKEN cpus
#define DT_N_S_cpus_FULL_NAME_UPPER_TOKEN CPUS

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_NODELABEL_NUM 0
#define DT_N_S_cpus_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_cpus_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_CHILD_NUM 1
#define DT_N_S_cpus_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_cpus_HASH iL3XRGZVvvtpNJqKV0_jvtuXF7m6kgky4nI2ifizwdg

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 6
#define DT_N_S_cpus_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	7, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-a72):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-a72.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UNQUOTED cpu@0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_TOKEN cpu_0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UPPER_TOKEN CPU_0

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_cpu_0_NODELABEL_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM 0
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_cpus_S_cpu_0_HASH Su0JBbOtM0QIxe_1ka2Xvgw4rk1QaIlMIj8Rp_v4yVQ

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 7
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_a72 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_a72 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-a72"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-a72"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-a72"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED arm,cortex-a72
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_a72
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_A72
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fe200000
 *
 * Node identifier: DT_N_S_soc_S_gpio_fe200000
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fe200000_PATH "/soc/gpio@fe200000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fe200000_FULL_NAME "gpio@fe200000"
#define DT_N_S_soc_S_gpio_fe200000_FULL_NAME_UNQUOTED gpio@fe200000
#define DT_N_S_soc_S_gpio_fe200000_FULL_NAME_TOKEN gpio_fe200000
#define DT_N_S_soc_S_gpio_fe200000_FULL_NAME_UPPER_TOKEN GPIO_FE200000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fe200000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_fe200000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_fe200000_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_NODELABEL(fn) fn(gpio)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_fe200000_CHILD_NUM 2
#define DT_N_S_soc_S_gpio_fe200000_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_soc_S_gpio_fe200000_HASH u7Ii3Rtd3QWD31oTca3kVv_uKVctJStUERznd6onl9M

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fe200000_ORD 8
#define DT_N_S_soc_S_gpio_fe200000_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fe200000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fe200000_SUPPORTS_ORDS \
	9, /* /soc/gpio@fe200000/gpio@1c */ \
	14, /* /soc/gpio@fe200000/gpio@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fe200000_EXISTS 1
#define DT_N_INST_1_simple_bus DT_N_S_soc_S_gpio_fe200000
#define DT_N_NODELABEL_gpio    DT_N_S_soc_S_gpio_fe200000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fe200000_REG_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_REG_IDX_0_VAL_ADDRESS 4263510016 /* 0xfe200000 */
#define DT_N_S_soc_S_gpio_fe200000_REG_IDX_0_VAL_SIZE 244 /* 0xf4 */
#define DT_N_S_soc_S_gpio_fe200000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_fe200000_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_IRQ_LEVEL 0
#define DT_N_S_soc_S_gpio_fe200000_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_S_gpio_fe200000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fe200000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fe200000_P_compatible {"simple-bus"}
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fe200000, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fe200000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_P_reg {4263510016 /* 0xfe200000 */, 244 /* 0xf4 */}
#define DT_N_S_soc_S_gpio_fe200000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_P_reg_IDX_0 4263510016
#define DT_N_S_soc_S_gpio_fe200000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_P_reg_IDX_1 244
#define DT_N_S_soc_S_gpio_fe200000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fe200000/gpio@1c
 *
 * Node identifier: DT_N_S_soc_S_gpio_fe200000_S_gpio_1c
 *
 * Binding (compatible = brcm,bcm2711-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/brcm,bcm2711-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_PATH "/soc/gpio@fe200000/gpio@1c"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FULL_NAME "gpio@1c"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FULL_NAME_UNQUOTED gpio@1c
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FULL_NAME_TOKEN gpio_1c
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FULL_NAME_UPPER_TOKEN GPIO_1C

/* Node parent (/soc/gpio@fe200000) identifier: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_PARENT DT_N_S_soc_S_gpio_fe200000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_NODELABEL(fn) fn(gpio1)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_HASH uknE0ANiCxcwSnSBNBOwNS0apgVsbdO6ENbcYOQt_Ws

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_ORD 9
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_REQUIRES_ORDS \
	4, /* /soc/interrupt-controller@ff841000 */ \
	8, /* /soc/gpio@fe200000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_SUPPORTS_ORDS \
	10, /* /leds */ \
	11, /* /leds/led-act */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_EXISTS 1
#define DT_N_INST_1_brcm_bcm2711_gpio DT_N_S_soc_S_gpio_fe200000_S_gpio_1c
#define DT_N_NODELABEL_gpio1          DT_N_S_soc_S_gpio_fe200000_S_gpio_1c

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_REG_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_REG_IDX_0_VAL_ADDRESS 28 /* 0x1c */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_irq 146
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_IRQ_LEVEL 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_COMPAT_MATCHES_brcm_bcm2711_gpio 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_COMPAT_VENDOR_IDX_0 "Broadcom Corporation"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_COMPAT_MODEL_IDX_0 "bcm2711-gpio"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_reg {28 /* 0x1c */}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_reg_IDX_0 28
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts {0 /* 0x0 */, 114 /* 0x72 */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_1 114
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_ngpios 18
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status "okay"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, status, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, status, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_LEN 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible {"brcm,bcm2711-gpio"}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_IDX_0 "brcm,bcm2711-gpio"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_IDX_0_STRING_UNQUOTED brcm,bcm2711-gpio
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_IDX_0_STRING_TOKEN brcm_bcm2711_gpio
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_IDX_0_STRING_UPPER_TOKEN BRCM_BCM2711_GPIO
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_1c_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"
#define DT_N_S_leds_FULL_NAME_UNQUOTED leds
#define DT_N_S_leds_FULL_NAME_TOKEN leds
#define DT_N_S_leds_FULL_NAME_UPPER_TOKEN LEDS

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_NODELABEL_NUM 0
#define DT_N_S_leds_FOREACH_NODELABEL(fn) 
#define DT_N_S_leds_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_leds_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_CHILD_NUM 1
#define DT_N_S_leds_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_act)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_act)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_act)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_act)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_leds_HASH bMroFUocDdjE3kJ38dK18mDvlCOPoyya5kIIs76irj8

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 10
#define DT_N_S_leds_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	9, /* /soc/gpio@fe200000/gpio@1c */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	11, /* /leds/led-act */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_IRQ_LEVEL 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led-act
 *
 * Node identifier: DT_N_S_leds_S_led_act
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_act_PATH "/leds/led-act"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_act_FULL_NAME "led-act"
#define DT_N_S_leds_S_led_act_FULL_NAME_UNQUOTED led-act
#define DT_N_S_leds_S_led_act_FULL_NAME_TOKEN led_act
#define DT_N_S_leds_S_led_act_FULL_NAME_UPPER_TOKEN LED_ACT

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_act_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_act_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_S_led_act_NODELABEL_NUM 1
#define DT_N_S_leds_S_led_act_FOREACH_NODELABEL(fn) fn(led_act)
#define DT_N_S_leds_S_led_act_FOREACH_NODELABEL_VARGS(fn, ...) fn(led_act, __VA_ARGS__)
#define DT_N_S_leds_S_led_act_FOREACH_ANCESTOR(fn) fn(DT_N_S_leds) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_act_CHILD_NUM 0
#define DT_N_S_leds_S_led_act_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_leds_S_led_act_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_act_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_leds_S_led_act_HASH 8IpxyLHmCruSP5gfqGkGUDmnzcmHcIyX_DlC0xEwVno

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_act_ORD 11
#define DT_N_S_leds_S_led_act_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_act_REQUIRES_ORDS \
	9, /* /soc/gpio@fe200000/gpio@1c */ \
	10, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_act_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_act_EXISTS 1
#define DT_N_ALIAS_led0        DT_N_S_leds_S_led_act
#define DT_N_NODELABEL_led_act DT_N_S_leds_S_led_act

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_act_REG_NUM 0
#define DT_N_S_leds_S_led_act_RANGES_NUM 0
#define DT_N_S_leds_S_led_act_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_act_IRQ_NUM 0
#define DT_N_S_leds_S_led_act_IRQ_LEVEL 0
#define DT_N_S_leds_S_led_act_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_act_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_fe200000_S_gpio_1c
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_VAL_pin 14
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_act_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_act_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_act, gpios, 0)
#define DT_N_S_leds_S_led_act_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_act, gpios, 0)
#define DT_N_S_leds_S_led_act_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_act, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_act_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_act, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_act_P_gpios_LEN 1
#define DT_N_S_leds_S_led_act_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_act_P_label "ACT"
#define DT_N_S_leds_S_led_act_P_label_STRING_UNQUOTED ACT
#define DT_N_S_leds_S_led_act_P_label_STRING_TOKEN ACT
#define DT_N_S_leds_S_led_act_P_label_STRING_UPPER_TOKEN ACT
#define DT_N_S_leds_S_led_act_P_label_IDX_0 "ACT"
#define DT_N_S_leds_S_led_act_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_act_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_act, label, 0)
#define DT_N_S_leds_S_led_act_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_act, label, 0)
#define DT_N_S_leds_S_led_act_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_act, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_act_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_act, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_act_P_label_LEN 1
#define DT_N_S_leds_S_led_act_P_label_EXISTS 1

/*
 * Devicetree node: /soc/memory@200000
 *
 * Node identifier: DT_N_S_soc_S_memory_200000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_200000_PATH "/soc/memory@200000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_200000_FULL_NAME "memory@200000"
#define DT_N_S_soc_S_memory_200000_FULL_NAME_UNQUOTED memory@200000
#define DT_N_S_soc_S_memory_200000_FULL_NAME_TOKEN memory_200000
#define DT_N_S_soc_S_memory_200000_FULL_NAME_UPPER_TOKEN MEMORY_200000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_200000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_200000_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_memory_200000_NODELABEL_NUM 1
#define DT_N_S_soc_S_memory_200000_FOREACH_NODELABEL(fn) fn(sram0)
#define DT_N_S_soc_S_memory_200000_FOREACH_NODELABEL_VARGS(fn, ...) fn(sram0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_200000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_200000_CHILD_NUM 0
#define DT_N_S_soc_S_memory_200000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_200000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_memory_200000_HASH tbWiunR2Vjrt69nzFcl0B_LKfL99rohv5qh_JCCqMNY

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_200000_ORD 12
#define DT_N_S_soc_S_memory_200000_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_200000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_200000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_200000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_200000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_200000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_200000_REG_NUM 1
#define DT_N_S_soc_S_memory_200000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_200000_REG_IDX_0_VAL_ADDRESS 2097152 /* 0x200000 */
#define DT_N_S_soc_S_memory_200000_REG_IDX_0_VAL_SIZE 524288 /* 0x80000 */
#define DT_N_S_soc_S_memory_200000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_200000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_200000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_200000_IRQ_LEVEL 0
#define DT_N_S_soc_S_memory_200000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_200000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_200000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_200000_P_reg {2097152 /* 0x200000 */, 524288 /* 0x80000 */}
#define DT_N_S_soc_S_memory_200000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_reg_IDX_0 2097152
#define DT_N_S_soc_S_memory_200000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_reg_IDX_1 524288
#define DT_N_S_soc_S_memory_200000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_200000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_200000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_200000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_200000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_200000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_200000, compatible, 0)
#define DT_N_S_soc_S_memory_200000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_200000, compatible, 0)
#define DT_N_S_soc_S_memory_200000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_200000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_200000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_200000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_200000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_200000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_memory_200000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_200000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_200000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_200000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@fe215040
 *
 * Node identifier: DT_N_S_soc_S_uart_fe215040
 *
 * Binding (compatible = brcm,bcm2711-aux-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/brcm,bcm2711-aux-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_fe215040_PATH "/soc/uart@fe215040"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_fe215040_FULL_NAME "uart@fe215040"
#define DT_N_S_soc_S_uart_fe215040_FULL_NAME_UNQUOTED uart@fe215040
#define DT_N_S_soc_S_uart_fe215040_FULL_NAME_TOKEN uart_fe215040
#define DT_N_S_soc_S_uart_fe215040_FULL_NAME_UPPER_TOKEN UART_FE215040

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_fe215040_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_fe215040_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_fe215040_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_fe215040_FOREACH_NODELABEL(fn) fn(uart1)
#define DT_N_S_soc_S_uart_fe215040_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_fe215040_CHILD_NUM 0
#define DT_N_S_soc_S_uart_fe215040_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_fe215040_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_uart_fe215040_HASH ojToe1_zEgilcHsBt4ITUlxFLq0GqUgfXnwfoWw9XSw

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_fe215040_ORD 13
#define DT_N_S_soc_S_uart_fe215040_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_fe215040_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@ff841000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_fe215040_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_fe215040_EXISTS 1
#define DT_N_INST_0_brcm_bcm2711_aux_uart DT_N_S_soc_S_uart_fe215040
#define DT_N_NODELABEL_uart1              DT_N_S_soc_S_uart_fe215040

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_fe215040_REG_NUM 1
#define DT_N_S_soc_S_uart_fe215040_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_REG_IDX_0_VAL_ADDRESS 4263596096 /* 0xfe215040 */
#define DT_N_S_soc_S_uart_fe215040_REG_IDX_0_VAL_SIZE 64 /* 0x40 */
#define DT_N_S_soc_S_uart_fe215040_RANGES_NUM 0
#define DT_N_S_soc_S_uart_fe215040_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_fe215040_IRQ_NUM 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_irq 125
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_soc_S_uart_fe215040_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_fe215040_COMPAT_MATCHES_brcm_bcm2711_aux_uart 1
#define DT_N_S_soc_S_uart_fe215040_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_COMPAT_VENDOR_IDX_0 "Broadcom Corporation"
#define DT_N_S_soc_S_uart_fe215040_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_COMPAT_MODEL_IDX_0 "bcm2711-aux-uart"
#define DT_N_S_soc_S_uart_fe215040_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_fe215040_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_fe215040_P_reg {4263596096 /* 0xfe215040 */, 64 /* 0x40 */}
#define DT_N_S_soc_S_uart_fe215040_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_reg_IDX_0 4263596096
#define DT_N_S_soc_S_uart_fe215040_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_reg_IDX_1 64
#define DT_N_S_soc_S_uart_fe215040_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_interrupts {0 /* 0x0 */, 93 /* 0x5d */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_1 93
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_uart_fe215040_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_clock_frequency 500000000
#define DT_N_S_soc_S_uart_fe215040_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_current_speed 115200
#define DT_N_S_soc_S_uart_fe215040_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_fe215040_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_parity "none"
#define DT_N_S_soc_S_uart_fe215040_P_parity_STRING_UNQUOTED none
#define DT_N_S_soc_S_uart_fe215040_P_parity_STRING_TOKEN none
#define DT_N_S_soc_S_uart_fe215040_P_parity_STRING_UPPER_TOKEN NONE
#define DT_N_S_soc_S_uart_fe215040_P_parity_IDX_0 "none"
#define DT_N_S_soc_S_uart_fe215040_P_parity_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_parity_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_uart_fe215040_P_parity_IDX_0_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_parity_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_parity_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe215040, parity, 0)
#define DT_N_S_soc_S_uart_fe215040_P_parity_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_fe215040, parity, 0)
#define DT_N_S_soc_S_uart_fe215040_P_parity_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe215040, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_parity_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_fe215040, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_parity_LEN 1
#define DT_N_S_soc_S_uart_fe215040_P_parity_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_status "okay"
#define DT_N_S_soc_S_uart_fe215040_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_fe215040_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_fe215040_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_fe215040_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_fe215040_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_fe215040_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe215040, status, 0)
#define DT_N_S_soc_S_uart_fe215040_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_fe215040, status, 0)
#define DT_N_S_soc_S_uart_fe215040_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe215040, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_fe215040, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_status_LEN 1
#define DT_N_S_soc_S_uart_fe215040_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_compatible {"brcm,bcm2711-aux-uart"}
#define DT_N_S_soc_S_uart_fe215040_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_compatible_IDX_0 "brcm,bcm2711-aux-uart"
#define DT_N_S_soc_S_uart_fe215040_P_compatible_IDX_0_STRING_UNQUOTED brcm,bcm2711-aux-uart
#define DT_N_S_soc_S_uart_fe215040_P_compatible_IDX_0_STRING_TOKEN brcm_bcm2711_aux_uart
#define DT_N_S_soc_S_uart_fe215040_P_compatible_IDX_0_STRING_UPPER_TOKEN BRCM_BCM2711_AUX_UART
#define DT_N_S_soc_S_uart_fe215040_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe215040, compatible, 0)
#define DT_N_S_soc_S_uart_fe215040_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_fe215040, compatible, 0)
#define DT_N_S_soc_S_uart_fe215040_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe215040, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_fe215040, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe215040_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_fe215040_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_fe215040_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_wakeup_source 0
#define DT_N_S_soc_S_uart_fe215040_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_fe215040_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_fe215040_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fe200000/gpio@0
 *
 * Node identifier: DT_N_S_soc_S_gpio_fe200000_S_gpio_0
 *
 * Binding (compatible = brcm,bcm2711-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/brcm,bcm2711-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_PATH "/soc/gpio@fe200000/gpio@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FULL_NAME "gpio@0"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FULL_NAME_UNQUOTED gpio@0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FULL_NAME_TOKEN gpio_0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FULL_NAME_UPPER_TOKEN GPIO_0

/* Node parent (/soc/gpio@fe200000) identifier: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_PARENT DT_N_S_soc_S_gpio_fe200000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_NODELABEL(fn) fn(gpio0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_HASH JCAd4BEa_UQv3r5xoqhqYxx9y4tMHaS9lhIRONn7G7w

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_ORD 14
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_REQUIRES_ORDS \
	4, /* /soc/interrupt-controller@ff841000 */ \
	8, /* /soc/gpio@fe200000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_EXISTS 1
#define DT_N_INST_0_brcm_bcm2711_gpio DT_N_S_soc_S_gpio_fe200000_S_gpio_0
#define DT_N_NODELABEL_gpio0          DT_N_S_soc_S_gpio_fe200000_S_gpio_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_REG_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_irq 145
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_ff841000
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_IRQ_LEVEL 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_COMPAT_MATCHES_brcm_bcm2711_gpio 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_COMPAT_VENDOR_IDX_0 "Broadcom Corporation"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_COMPAT_MODEL_IDX_0 "bcm2711-gpio"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts {0 /* 0x0 */, 113 /* 0x71 */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_1 113
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_ngpios 28
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status "okay"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, status, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, status, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_LEN 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible {"brcm,bcm2711-gpio"}
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_IDX_0 "brcm,bcm2711-gpio"
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_IDX_0_STRING_UNQUOTED brcm,bcm2711-gpio
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_IDX_0_STRING_TOKEN brcm_bcm2711_gpio
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_IDX_0_STRING_UPPER_TOKEN BRCM_BCM2711_GPIO
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, compatible, 0)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_fe200000_S_gpio_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_fe215040
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_fe215040
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_soc_S_memory_200000
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_200000) fn(DT_N_S_soc_S_interrupt_controller_ff841000) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c) fn(DT_N_S_soc_S_uart_fe215040) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_timer) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_act)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_200000) fn(DT_N_S_soc_S_interrupt_controller_ff841000) fn(DT_N_S_soc_S_gpio_fe200000) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c) fn(DT_N_S_soc_S_uart_fe215040) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_timer) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_act)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_act, __VA_ARGS__)

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_raspberrypi_4_model_b 1
#define DT_COMPAT_HAS_OKAY_brcm_bcm2838 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_arm_gic_v2 1
#define DT_COMPAT_HAS_OKAY_arm_gic 1
#define DT_COMPAT_HAS_OKAY_brcm_bcm2711_gpio 1
#define DT_COMPAT_HAS_OKAY_brcm_bcm2711_aux_uart 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_a72 1
#define DT_COMPAT_HAS_OKAY_arm_armv8_timer 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_raspberrypi_4_model_b_NUM_OKAY 1
#define DT_N_INST_brcm_bcm2838_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 2
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_arm_gic_v2_NUM_OKAY 1
#define DT_N_INST_arm_gic_NUM_OKAY 1
#define DT_N_INST_brcm_bcm2711_gpio_NUM_OKAY 2
#define DT_N_INST_brcm_bcm2711_aux_uart_NUM_OKAY 1
#define DT_N_INST_arm_cortex_a72_NUM_OKAY 1
#define DT_N_INST_arm_armv8_timer_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_raspberrypi_4_model_b(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_4_model_b(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_4_model_b(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_4_model_b(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_brcm_bcm2838(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_brcm_bcm2838(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_brcm_bcm2838(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_brcm_bcm2838(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc) fn(DT_N_S_soc_S_gpio_fe200000)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_200000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_200000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_gic_v2(fn) fn(DT_N_S_soc_S_interrupt_controller_ff841000)
#define DT_FOREACH_OKAY_VARGS_arm_gic_v2(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_gic_v2(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_gic_v2(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_gic(fn) fn(DT_N_S_soc_S_interrupt_controller_ff841000)
#define DT_FOREACH_OKAY_VARGS_arm_gic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_ff841000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_gic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_gic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_brcm_bcm2711_gpio(fn) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c)
#define DT_FOREACH_OKAY_VARGS_brcm_bcm2711_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fe200000_S_gpio_1c, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_brcm_bcm2711_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_brcm_bcm2711_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_brcm_bcm2711_aux_uart(fn) fn(DT_N_S_soc_S_uart_fe215040)
#define DT_FOREACH_OKAY_VARGS_brcm_bcm2711_aux_uart(fn, ...) fn(DT_N_S_soc_S_uart_fe215040, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_brcm_bcm2711_aux_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_brcm_bcm2711_aux_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_a72(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_a72(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_a72(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_a72(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv8_timer(fn) fn(DT_N_S_timer)
#define DT_FOREACH_OKAY_VARGS_arm_armv8_timer(fn, ...) fn(DT_N_S_timer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv8_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv8_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
